before_script:
  - export DISTRO_CODENAME=`lsb_release -cs` && echo Using distro $DISTRO_CODENAME
  - apt-get update -yq && apt-get install -y lintian libwxgtk3.0-dev

variables:
  GET_SOURCES_ATTEMPTS: 3

#########################
# Templates using anchors
#########################
.amd64_trusty_t: &amd64_trusty_job
  image: registry.roboception.de/tools/docker_images:buildimage
  tags:
    - amd64
    - docker

.armhf_trusty_t: &armhf_trusty_job
  image: registry.roboception.de/tools/docker_images:armhf-buildimage
  tags:
    - armhf
    - docker

.amd64_xenial_t: &amd64_xenial_job
  image: registry.roboception.de/tools/docker_images:xenial-buildimage
  tags:
    - amd64
    - docker

.armhf_xenial_t: &armhf_xenial_job
  image: registry.roboception.de/tools/docker_images:armhf-xenial-buildimage
  tags:
    - armhf
    - docker

.amd64_bionic_t: &amd64_bionic_job
  image: registry.roboception.de/tools/docker_images:bionic-buildimage
  tags:
    - amd64
    - docker

.armhf_bionic_t: &armhf_bionic_job
  image: registry.roboception.de/tools/docker_images:armhf-bionic-buildimage
  tags:
    - armhf
    - docker

#############
# Templates
#############
.test:
  stage: test
  script:
    - mkdir build && cd build
    - cmake -DBUILD_RCDISCOVER_GUI=ON ..
    - make -j 4
    - CTEST_OUTPUT_ON_FAILURE=1 make test

# Debian packaging
.package:
  stage: deploy
  script:
    - mkdir build && cd build
    - if [ -n "$ROS_DISTRO" ]; then
        cmake -DBUILD_RCDISCOVER_GUI=ON -DCMAKE_INSTALL_PREFIX="/opt/ros/$ROS_DISTRO" -DCMAKE_PREFIX_PATH="/opt/ros/$ROS_DISTRO" -DCMAKE_BUILD_TYPE=Release .. ;
      else
        cmake -DBUILD_RCDISCOVER_GUI=ON -DCMAKE_INSTALL_PREFIX="/usr" .. ;
      fi
    - make -j4 package
    - if [ -z "$APT_REPO" ]; then export APT_REPO=testing; fi
    - upload_deb.sh $DISTRO_CODENAME-$APT_REPO *.deb

.package_testing:
  extends: .package
  only:
    - master
  variables:
    TESTING_DEBS: "true"
    APT_REPO: "testing"

.package_stable:
  extends: .package
  only:
    - /^v[0-9]+\.[0-9]+\.[0-9]+/
  except:
    - branches
  variables:
    APT_REPO: "stable"

.docker_build:
  image: docker:latest
  before_script:
    - docker info
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - if [ -z "$IMAGE" ]; then export IMAGE=$CI_REGISTRY_IMAGE ; fi
    - if [ -n "$CI_COMMIT_TAG" ]; then export IMAGE_TAG=$CI_COMMIT_TAG ; else export IMAGE_TAG=$CI_COMMIT_REF_SLUG ; fi
    - if [ "$CI_COMMIT_REF_NAME" = "master" ]; then export IMAGE_TAG=testing ; fi
    - if [ -z "$DOCKER_BUILD_FLAGS" ]; then export DOCKER_BUILD_FLAGS="--pull --no-cache"; fi
  script:
    - docker build $DOCKER_BUILD_FLAGS -t $IMAGE:$IMAGE_TAG .
    - docker push $IMAGE:$IMAGE_TAG
    - if [ -n "$CI_COMMIT_TAG" ]; then docker tag $IMAGE:$IMAGE_TAG $IMAGE:latest; docker push $IMAGE:latest; docker rmi $IMAGE:latest; fi
    - docker rmi $IMAGE:$IMAGE_TAG || true
  tags:
    - docker-build

##############
#### Jobs ####
##############
gen_dox:
  <<: *amd64_bionic_job
  image: ros:melodic-ros-core
  variables:
    TESTING_DEBS: "true"
  stage: deploy
  script:
    - apt-get install -y doxygen ncftp ros-${ROS_DISTRO}-rosdoc-lite
    - rosdoc_lite .
    - make doc
    - upload_dox.sh doc/html
  only:
    - master
    - tags
  tags:
    - docs

# Test (on every commit)
########################
test:trusty:amd64:
  <<: *amd64_trusty_job
  extends: .test

test:trusty:armhf:
  <<: *armhf_trusty_job
  extends: .test

test:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .test

test:xenial:armhf:
  <<: *armhf_xenial_job
  extends: .test

test:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .test

test:bionic:armhf:
  <<: *armhf_bionic_job
  extends: .test

# Deploy testing (only on master)
#################################
package_testing:trusty:amd64:
  <<: *amd64_trusty_job
  extends: .package_testing

package_testing:trusty:armhf:
  <<: *armhf_trusty_job
  extends: .package_testing

package_testing:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .package_testing

package_testing:xenial:armhf:
  <<: *armhf_xenial_job
  extends: .package_testing

package_testing:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .package_testing

package_testing:bionic:armhf:
  <<: *armhf_bionic_job
  extends: .package_testing

# Deploy stable (only for releases, version tags)
#################################################
package_stable:trusty:amd64:
  <<: *amd64_trusty_job
  extends: .package_stable

package_stable:trusty:armhf:
  <<: *armhf_trusty_job
  extends: .package_stable

package_stable:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .package_stable

package_stable:xenial:armhf:
  <<: *armhf_xenial_job
  extends: .package_stable

package_stable:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .package_stable

package_stable:bionic:armhf:
  <<: *armhf_bionic_job
  extends: .package_stable

# Build and push as docker image
################################
build:image:
  stage: deploy
  extends: .docker_build
  except:
    - schedules
